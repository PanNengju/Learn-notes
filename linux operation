//=========================================
svn:
#查看可安装版本
    sudo apt list subversion

#安装软件
    sudo apt install subversion
    
#创建用于存放版本库的目录
    mkdir /home/svn
   
#在创建的目录下创建一个新的文件夹，文件夹的名称与将要上传至svn的项目名称一致
    sudo svnadmin create /home/svn/repository
    
#进入conf目录,conf目录中authz文件是权限控制文件，passwd是帐号密码文件，svnserve.conf是SVN服务配置文件
#修改passwd文件，加入用户，格式就是“用户名=密码”，如：admin = admin
#修改authz文件，加入用户权限：
    [/]     #目录
    zhaodaxin = rw      #权限控制
    
#修改svnserve.conf(很重要)
    
    
#停止重启SVN
    killall svnserve //停止
    svnserve -d -r /opt/svn/repositories // 启动
   
#查看SVN进程
    ps -ef|grep svn|grep -v grep
    
#svn: E220001: Item is not readable
#解决办法：在svnserve.conf 文件中, 设置 anon-access = none


#将文件checkout到本地目录
    svn checkout path（path是服务器上的目录）
    #例如：svn checkout svn://192.168.1.1/pro/domain
    
#往版本库中添加新的文件
    svn add file
    #例如：svn add test.php(添加test.php)

#更新版本
    svn update
    
#将改动的文件提交到版本库
    svn commit -m "LogMessage" [-N] [--no-unlock] PATH(如果选择了保持锁，就使用--no-unlock开关)
    #例如：svn commit -m "add test file for my test" test.php
    
#加锁/解锁
    svn lock -m "LockMessage" [--force] PATH
    svn unlock PATH
    #例如：svn lock -m "lock test file" test.php


//=========================================
scp:
#从服务器复制文件到本地：
    scp root@192.168.1.100:/data/test.txt /home/myfile/
    
#从服务器复制文件夹到本地：
    scp -r root@192.168.1.100:/data/ /home/myfile/
    
#从本地复制文件到服务器：
    scp /home/myfile/test.txt root@192.168.1.100:/data/
    
#从本地复制文件夹到服务器：
    scp -r /home/myfile/ root@192.168.1.100:/data/
    
    
//===========================================
#Linux查找含有某字符串的所有文件

    grep -rn "hello,world!" *
    
    * : 表示当前目录所有文件，也可以是某个文件名
    -r 是递归查找
    -n 是显示行号
    -R 查找所有文件包含子目录
    -i 忽略大小写
    
    \< 和 \> 分别标注单词的开始与结尾
    '^'：指匹配的字符串在行首
    '$'：指匹配的字符串在行尾
   
#xargs配合grep查找
    find -type f -name '*.php'|xargs grep 'GroupRecord'


ubuntu 使用 .bed文件

Dpkg 的普通用法：
sudo dpkg -i <package.deb> 安装一个 Debian 软件包，如你手动下载的文件。
sudo dpkg -c <package.deb> 列出 <package.deb> 的内容。
sudo dpkg -I <package.deb> 从 <package.deb> 中提取包裹信息。
sudo dpkg -r 移除一个已安装的包裹。
sudo dpkg -P 完全清除一个已安装的包裹。和 remove 不同的是，remove 只是删掉数据和可执行文件，purge 另外还删除所有的配制文件。
sudo dpkg -L 列出 安装的所有文件清单。同时请看 dpkg -c 来检查一个 .deb 文件的内容。
sudo dpkg -s 显示已安装包裹的信息。同时请看 apt-cache 显示 Debian 存档中的包裹信息，以及 dpkg -I 来显示从一个 .deb 文件中提取的包裹信息。
sudo dpkg-reconfigure 重新配制一个已经安装的包裹，如果它使用的是 debconf (debconf 为包裹安装提供了一个统一的配制界面)。

如果安装过程中出现问题,可以先使用命令:
sudo apt-get update
更新后再执行上面的命令.
    
    
    
    
    
    
    
